image: localhost:8123/golang:1.15

variables: &envs
  CACHE_PATH: .cache
  CACHE_KEY: log-cache
  BIN_NAME: booking-log
  DOCKER_IMAGE_LABEL_KEY: log

cache: &global_cache
  key: ${CACHE_KEY}
  paths:
    - ${CACHE_PATH}

before_script:
  - apt-get update
    && apt-get install -y -qq make
  - git config --global  url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.itechart-group.com".insteadOf "https://gitlab.itechart-group.com"
  - export GOPATH="${CI_PROJECT_DIR}/.cache"

stages:
  - source
  - lint
  - test
  - build
  - push
  - deploy

get_source:
  cache:
    <<: *global_cache
  variables:
    <<: *envs
  stage: source
  script:
    - make dep

linter:
  cache:
    <<: *global_cache
  variables:
    <<: *envs
  stage: lint
  script:
    - make golint

cover:
  cache:
    <<: *global_cache
  variables:
    <<: *envs
  stage: test
  services:
    - name: docker.elastic.co/elasticsearch/elasticsearch-oss:7.4.2
      alias: elasticsearch
      command: [ "bin/elasticsearch", "-Ediscovery.type=single-node", "-Enetwork.bind_host=0.0.0.0" ]
  script:
    - curl "http://elasticsearch:9200/_cat/health"
    - make test
    - go tool cover -func=${COV_FILE}

compile:
  cache:
    <<: *global_cache
  variables:
    <<: *envs
  stage: build
  script:
    - make build
  artifacts:
    name: booking-log-binary
    paths:
      - ${BIN_NAME}

docker:
  variables:
    <<: *envs
    DOCKER_IMAGE_LABEL_VALUE: prod
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} --username ${CI_REGISTRY_USER} --password-stdin
  tags:
    - docker
  stage: push
  when: manual
  image: localhost:8123/docker:19.03.1
  only:
    - tags
    - master
  except:
    - branches
  script:
    - docker build -t ${CI_REGISTRY}/${BIN_NAME}:${CI_COMMIT_TAG}
      --label ${DOCKER_IMAGE_LABEL_KEY}=${DOCKER_IMAGE_LABEL_VALUE} .
    - docker push ${CI_REGISTRY}/${BIN_NAME}:${CI_COMMIT_TAG}
  after_script:
    - docker logout

docker-test:
  variables:
    <<: *envs
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} --username ${CI_REGISTRY_USER} --password-stdin
  tags:
    - docker
  stage: push
  when: manual
  image: localhost:8123/docker:19.03.1
  only:
    - dev
  script:
    - docker build -t ${CI_REGISTRY}/${BIN_NAME}:test .
    - docker push ${CI_REGISTRY}/${BIN_NAME}:test
  after_script:
    - docker logout

docker-qa:
  variables:
    <<: *envs
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} --username ${CI_REGISTRY_USER} --password-stdin
  tags:
    - docker
  stage: push
  when: manual
  image: localhost:8123/docker:19.03.1
  only:
    - /^release\/.*$/
  script:
    - docker build -t ${CI_REGISTRY}/${BIN_NAME}:qa .
    - docker push ${CI_REGISTRY}/${BIN_NAME}:qa
  after_script:
    - docker logout

vm-deploy:
  variables:
    <<: *envs
    DOCKER_IMAGE_LABEL_VALUE: prod
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} --username ${CI_REGISTRY_USER} --password-stdin
  tags:
    - docker
  stage: deploy
  when: manual
  image: localhost:8123/docker:19.03.1
  only:
    - tags
    - master
  except:
    - branches
  script:
    - for container_id in $(docker ps -aq --filter="label=${DOCKER_IMAGE_LABEL_KEY}=${DOCKER_IMAGE_LABEL_VALUE}");
      do docker stop $container_id ; docker rm $container_id;done
    - docker run -d -v /etc/localtime:/etc/localtime:ro --restart=unless-stopped
      -e LOG_SERVER_URL=${LOG_SERVER_URL}
      -e LOG_DB_CONNECTION_STRING=${LOG_DB_CONNECTION_STRING}
      -e LOG_DB_INDEX_NAME=${LOG_DB_INDEX_NAME}
      -p "${PROD_PORT}:${PROD_PORT}"
      --name ${BIN_NAME}-${CI_COMMIT_TAG}
      ${CI_REGISTRY}/${BIN_NAME}:${CI_COMMIT_TAG}
  after_script:
    - docker logout

vm-deploy-test:
  variables:
    <<: *envs
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} --username ${CI_REGISTRY_USER} --password-stdin
  tags:
    - docker
  stage: deploy
  when: manual
  image: localhost:8123/docker:19.03.1
  only:
    - dev
  script:
    - for container_id in $(docker ps -aq --filter="name=${BIN_NAME}-test");do docker stop $container_id ; docker rm $container_id;done
    - docker run -d -v /etc/localtime:/etc/localtime:ro --restart=unless-stopped
      -e LOG_SERVER_URL=${TEST_LOG_SERVER_URL}
      -e LOG_DB_CONNECTION_STRING=${TEST_LOG_DB_CONNECTION_STRING}
      -e LOG_DB_INDEX_NAME=${TEST_LOG_DB_INDEX_NAME}
      -p "${DEV_PORT}:${DEV_PORT}"
      --name ${BIN_NAME}-test
      ${CI_REGISTRY}/${BIN_NAME}:test
  after_script:
    - docker logout

vm-deploy-qa:
  variables:
    <<: *envs
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} --username ${CI_REGISTRY_USER} --password-stdin
  tags:
    - docker
  stage: deploy
  when: manual
  image: localhost:8123/docker:19.03.1
  only:
    - /^release\/.*$/
  script:
    - for container_id in $(docker ps -aq --filter="name=${BIN_NAME}-qa");do docker stop $container_id ; docker rm $container_id;done
    - docker run -d -v /etc/localtime:/etc/localtime:ro --restart=unless-stopped
      -e LOG_SERVER_URL=${QA_LOG_SERVER_URL}
      -e LOG_DB_CONNECTION_STRING=${QA_LOG_DB_CONNECTION_STRING}
      -e LOG_DB_INDEX_NAME=${QA_LOG_DB_INDEX_NAME}
      -p "${QA_PORT}:${QA_PORT}"
      --name ${BIN_NAME}-qa
      ${CI_REGISTRY}/${BIN_NAME}:qa
  after_script:
    - docker logout
